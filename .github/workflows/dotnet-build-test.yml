name: dotnet-build-test

on:
  workflow_call:
    inputs:
      soln-name:
        required: true
        type: string
      build-config:
        required: true
        type: string
      build-version:
        required: true
        type: string

jobs:
  build-test:

    runs-on: self-hosted
    steps:
    - name: Clean working folder
      run: |
        ls -la ./
        rm -rf ./* || true
        rm -rf ./.??* || true
        ls -la ./

    - uses: actions/checkout@v3

    - name: Dotnet restore
      shell: bash
      env:
        AZURE_USERNAME: ${{ secrets.AZURE_USERNAME }}
        AZURE_PAT: ${{ secrets.AZURE_PAT }}
        GH_USERNAME: ${{ secrets.GH_USERNAME }}
        GH_PAT: ${{ secrets.GH_PAT }}
      run: |
        dotnet nuget update source GitHubNuGetV3 -u ${{ github.actor }} -p ${{ secrets.GH_PAT }} --store-password-in-clear-text
        dotnet restore

    - name: Check if secure atirfact exists
      uses: xSAVIKx/artifact-exists-action@v0
      with:
        name: ${{ inputs.soln-name }}-secure

    - name: Download secure folder
      if: steps.check_coverage_artifact.outputs.exists == 'true'
      uses: actions/download-artifact@v3
      with:
        name: ${{ inputs.soln-name }}-secure
        path: ./secure

    - name: List files
      run: pwd && ls -R
    
    - name: Build version
      run: echo build-version="${{ inputs.build-version }}"
    
    - name: Dotnet build
      shell: bash
      run: |
        dotnet build "${{ inputs.soln-name }}.sln" --no-restore --configuration ${{ inputs.build-config }} /p:Version=${{ inputs.build-version }}
    
    - name: Dotnet test
      shell: bash
      run: |
        dotnet test "${{ inputs.soln-name }}.sln" --configuration ${{ inputs.build-config }} --test-adapter-path:. --filter "FullyQualifiedName!~IntegTests&FullyQualifiedName!~TestBase" --logger:"junit;LogFilePath=../../test-results/{assembly}-test-result.xml;MethodFormat=Class;FailureBodyFormat=Verbose" --diag test-results/test-logs.txt
    
    - name: Dotnet publish
      shell: bash
      run: |
        dotnet publish "${{ inputs.soln-name }}.sln" --configuration ${{ inputs.build-config }} --no-restore --no-build --output ./publish

    - name: List nuget packages
      run: ls -R **/*.nupkg

    - name: Copy nuget packages if exist to nuget folder
      run: mkdir -p nuget
      run: |
        cp **/*.nupkg ./nuget 2>/dev/null || :
        cp nuget.config ./nuget

    - name: List contents of nuget folder
      run: ls -R ./nuget

    - name: Artifact nuget folder
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.soln-name }}-nuget
        path: ./nuget
    
    - name: Copy secure folder if exist to publish folder
      run: |
        cp -Rf ./secure ./publish 2>/dev/null || :
    
    - name: Copy Docker files if exist to publish folder
      run: |
        cp Dockerfile .dockerignore ./publish 2>/dev/null || :

    - name: Artifact publish folder
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.soln-name }}-publish
        path: ./publish

    - name: Artifact k8s folder
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.soln-name }}-k8s
        path: ./k8s

    - name: Create tag
      uses: actions/github-script@v5
      with:
        script: |
          github.rest.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: 'refs/tags/v${{ inputs.build-version }}',
            sha: context.sha
          })