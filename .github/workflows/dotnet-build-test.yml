name: dotnet-build-test

on:
  workflow_call:
    inputs:
      soln-name:
        required: true
        type: string
      build-config:
        required: true
        type: string
      build-version:
        required: true
        type: string

jobs:
  build-test:

    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v3
    - name: Dotnet restore
      shell: bash
      env:
        AZURE_USERNAME: ${{ secrets.AZURE_USERNAME }}
        AZURE_PAT: ${{ secrets.AZURE_PAT }}
        GH_USERNAME: ${{ secrets.GH_USERNAME }}
        GH_PAT: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo AZURE_PAT="$AZURE_PAT" && echo AZURE_USERNAME="$AZURE_USERNAME" && dotnet restore
    
    - name: Build version
      run: echo build-version="${{ inputs.build-version }}"

    # Get secure folder from S3
    - name: Set folder path env var
      run:  >-
        SCM_PROJECT_NAME_LOWER=$(echo ${{ inputs.scm-project-name }} | tr "[:upper:]" "[:lower:]") 
        && echo SCM_PROJECT_NAME_LOWER="$SCM_PROJECT_NAME_LOWER"
        && echo "AWS_S3_PATH=$SCM_PROJECT_NAME_LOWER/${{ inputs.soln-name }}" >> $GITHUB_ENV
    - name: Test S3 path env var
      run: echo "AWS_S3_PATH=$AWS_S3_PATH"
    - name: Download from S3
      run: aws s3 cp "s3://$AWS_S3_PATH/secure" ./secure --recursive
    
    - name: Dotnet build
      shell: bash
      env:
        BUILD_VERSION: ${{ inputs.build-version }}
      run: |
        dotnet build "${{ inputs.soln-name }}.sln" --no-restore --configuration ${{ inputs.build-config }} /p:Version=${{ inputs.build-version }} /p:AssemblyVersion=${{ inputs.build-version }}
    
    - name: Dotnet test
      shell: bash
      run: |
        dotnet test "${{ inputs.soln-name }}.sln" --configuration ${{ inputs.build-config }} --test-adapter-path:. --filter "FullyQualifiedName!~IntegTests&FullyQualifiedName!~TestBase" --logger:"junit;LogFilePath=../../test-results/{assembly}-test-result.xml;MethodFormat=Class;FailureBodyFormat=Verbose" --diag test-results/test-logs.txt
    
    - name: Dotnet publish
      shell: bash
      run: |
        dotnet publish "${{ inputs.soln-name }}.sln" --configuration ${{ inputs.build-config }} --no-restore --no-build --output ./publish

    - name: Artifact nuget packages
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.soln-name }}-nugets
        path: '**/*.nupkg'
    
    - name: Copy Docker files if exist to publish folder
      run: |
        cp Dockerfile .dockerignore ./publish 2>/dev/null || :

    - name: Artifact publish folder
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.soln-name }}-publish
        path: ./publish

    - name: Artifact k8s folder
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.soln-name }}-k8s
        path: ./k8s

    - name: Create tag
      uses: actions/github-script@v5
      with:
        script: |
          github.rest.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: 'refs/tags/v${{ inputs.build-version }}',
            sha: context.sha
          })